/*
        SHARP PC-G800 series Emulator
*/
#if !defined(G800_H)
#define G800_H

#include "basic.h"
#include "conf.h"
#include "depend.h"
#include "z80.h"
#include <stdio.h>
#include <unistd.h>

#define strcmp(x, y) strcmp((const char *)(x), (const char *)(y))
#define stricmp(x, y) stricmp((const char *)(x), (const char *)(y))
#define strcpy(x, y) strcpy((char *)(x), (const char *)(y))
#define strlen(x) strlen((const char *)(x))

/*
        マクロ
*/
/* 真偽 */
#define FALSE 0
#define TRUE 1

/* エミュレートされるマシン */
#define MACHINE_FIRST 0
#define MACHINE_E200                                                                   \
  0 /* PC-G801/PC-G802/PC-G803/PC-G805/PC-G811/PC-G813/PC-G820/PC-G830/PC-E200/PC-E220 \
     */
#define MACHINE_G815 1 /* PC-G815 */
#define MACHINE_G850 2 /* PC-G850/PC-G850S/PC-G850V/PC-G850VS */
#define MACHINE_LAST 2
#define MACHINE_SUB_PCG801 0
#define MACHINE_SUB_PCE200 1
#define MACHINE_SUB_PCG802 2
#define MACHINE_SUB_PCG803 3
#define MACHINE_SUB_PCG805 4
#define MACHINE_SUB_PCG811 5
#define MACHINE_SUB_PCG813 6
#define MACHINE_SUB_PCG820 7
#define MACHINE_SUB_PCG830 8
#define MACHINE_SUB_PCE220 9
#define MACHINE_SUB_PCE200ANY 10
#define MACHINE_SUB_PCG815 11
#define MACHINE_SUB_PCG850 12
#define MACHINE_SUB_PCG850S 13
#define MACHINE_SUB_PCG850V 14
#define MACHINE_SUB_PCG850VS 15
#define MACHINE_SUB_PCG850ANY 16
#define MACHINE_PCG801 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG801)
#define MACHINE_PCE200 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCE200)
#define MACHINE_PCG802 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG802)
#define MACHINE_PCG803 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG803)
#define MACHINE_PCG805 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG805)
#define MACHINE_PCG811 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG811)
#define MACHINE_PCG813 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG813)
#define MACHINE_PCG820 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG820)
#define MACHINE_PCG830 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCG830)
#define MACHINE_PCE220 (((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCE220)
#define MACHINE_PCE200ANY	((MACHINE_E200 + 1) << 8) | MACHINE_SUB_PCE200ANY)
#define MACHINE_PCG815 (((MACHINE_G815 + 1) << 8) | MACHINE_SUB_PCG815)
#define MACHINE_PCG850ANY (((MACHINE_G850 + 1) << 8) | MACHINE_SUB_PCG850ANY)
#define MACHINE_PCG850 (((MACHINE_G850 + 1) << 8) | MACHINE_SUB_PCG850)
#define MACHINE_PCG850S (((MACHINE_G850 + 1) << 8) | MACHINE_SUB_PCG850S)
#define MACHINE_PCG850V (((MACHINE_G850 + 1) << 8) | MACHINE_SUB_PCG850V)
#define MACHINE_PCG850VS (((MACHINE_G850 + 1) << 8) | MACHINE_SUB_PCG850VS)

/* キーコード */
#define GKEY_NONE 0x00
#define GKEY_OFF 0x01
#define GKEY_Q 0x02
#define GKEY_W 0x03
#define GKEY_E 0x04
#define GKEY_R 0x05
#define GKEY_T 0x06
#define GKEY_Y 0x07
#define GKEY_U 0x08
#define GKEY_A 0x09
#define GKEY_S 0x0a
#define GKEY_D 0x0b
#define GKEY_F 0x0c
#define GKEY_G 0x0d
#define GKEY_H 0x0e
#define GKEY_J 0x0f
#define GKEY_K 0x10
#define GKEY_Z 0x11
#define GKEY_X 0x12
#define GKEY_C 0x13
#define GKEY_V 0x14
#define GKEY_B 0x15
#define GKEY_N 0x16
#define GKEY_M 0x17
#define GKEY_COMMA 0x18
#define GKEY_BASIC 0x19
#define GKEY_TEXT 0x1a
#define GKEY_CAPS 0x1b
#define GKEY_KANA 0x1c
#define GKEY_TAB 0x1d
#define GKEY_SPACE 0x1e
#define GKEY_DOWN 0x1f
#define GKEY_UP 0x20
#define GKEY_LEFT 0x21
#define GKEY_RIGHT 0x22
#define GKEY_ANS 0x23
#define GKEY_0 0x24
#define GKEY_PERIOD 0x25
#define GKEY_EQUAL 0x26
#define GKEY_PLUS 0x27
#define GKEY_RETURN 0x28
#define GKEY_L 0x29
#define GKEY_SEMICOLON 0x2a
#define GKEY_CONST 0x2b
#define GKEY_1 0x2c
#define GKEY_2 0x2d
#define GKEY_3 0x2e
#define GKEY_MINUS 0x2f
#define GKEY_MPLUS 0x30
#define GKEY_I 0x31
#define GKEY_O 0x32
#define GKEY_INSERT 0x33
#define GKEY_4 0x34
#define GKEY_5 0x35
#define GKEY_6 0x36
#define GKEY_ASTER 0x37
#define GKEY_RCM 0x38
#define GKEY_P 0x39
#define GKEY_BACKSPACE 0x3a
#define GKEY_PI 0x3b
#define GKEY_7 0x3c
#define GKEY_8 0x3d
#define GKEY_9 0x3e
#define GKEY_SLASH 0x3f
#define GKEY_RKAKKO 0x40
#define GKEY_NPR 0x41
#define GKEY_DEG 0x42
#define GKEY_SQR 0x43
#define GKEY_SQU 0x44
#define GKEY_HAT 0x45
#define GKEY_LKAKKO 0x46
#define GKEY_RCP 0x47
#define GKEY_MDF 0x48
#define GKEY_2NDF 0x49
#define GKEY_SIN 0x4a
#define GKEY_COS 0x4b
#define GKEY_LN 0x4c
#define GKEY_LOG 0x4d
#define GKEY_TAN 0x4e
#define GKEY_FE 0x4f
#define GKEY_CLS 0x50
#define GKEY_BREAK 0x51
#define GKEY_DOUBLE 0x52

/* キーモデファイア */
#define GMODKEY_NOSHIFT 0x100
#define GMODKEY_SHIFT 0x200
#define GMODKEY_MASK ((uint16)0xff00)

/* 仮想キーコード */
#define GKEY_SHIFT 0x53
#define GKEY_RESET 0x54
#define GKEY_DEBUG 0x55
#define GKEY_11PIN1 0x56
#define GKEY_11PIN2 0x57
#define GKEY_11PIN3 0x58
#define GKEY_11PIN4 0x59
#define GKEY_11PIN5 0x5a
#define GKEY_11PIN6 0x5b
#define GKEY_11PIN7 0x5c
#define GKEY_11PIN8 0x5d
#define GKEY_MENU 0x5e
#define GKEY_COPY 0x5f
#define GKEY_PASTE 0x60

/* 割り込み要因 */
#define INTERRUPT_IA 0x01
#define INTERRUPT_KON 0x02
#define INTERRUPT_1S 0x04
#define INTERRUPT_INT1 0x08

/* タイマ割り込み */
#define TIMER_1S 0x01

/* シリアルポート */
#define PIN11_BUSY 0x01 /* 端子番号4  BUSY */
#define PIN11_DOUT 0x02 /* 端子番号5  Dout */
#define PIN11_XIN 0x04  /* 端子番号6  Xin  */
#define PIN11_XOUT 0x08 /* 端子番号7  Xout */
#define PIN11_DIN 0x10  /* 端子番号8  Din  */
#define PIN11_ACK 0x20  /* 端子番号9  ACK  */
#define PIN11_10 0x40   /* 端子番号10 -    */
#define PIN11_11 0x80   /* 端子番号11 -    */

/* ROM(c000h-ffffh)へのポインタ */
#define ROM(page) &rom[0x4000 * (page)]

/* EXROM(8000h-bfffh)へのポインタ */
#define EXROM(page) &exrom[0x4000 * (page)]

/* ジョイスティックのボタンの数 */
#define JOY_BUTTONS 12

/* サウンド出力の周波数 */
#define FREQ_SOUND 44100

/* カーソル形状 */
#define CURSOR_NONE 0 /* カーソルなし */
#define CURSOR_NEW 1  /* 新しい文字 */
#define CURSOR_OVER 2 /* 上書き */
#define CURSOR_INS 3  /* 挿入 */

/* 入力モード */
#define GETLINE_MAN 0
#define GETLINE_PRO 1
#define GETLINE_RUN 2

/* PC-E200 LCD・VRAM情報 */
#define E200_CELL_WIDTH 5
#define E200_CELL_HEIGHT 7
#define E200_LCD_COLS 24
#define E200_LCD_ROWS 4
#define E200_VRAM_COLS 24
#define E200_VRAM_ROWS 4
#define E200_VRAM_WIDTH (E200_VRAM_COLS * E200_CELL_WIDTH + 1)
#define E200_VRAM_HEIGHT (E200_VRAM_ROWS * 8)
#define E200_BUSY_ROW 0
#define E200_BUSY_MASK 0x01
#define E200_CAPS_ROW 0
#define E200_CAPS_MASK 0x02
#define E200_KANA_ROW 0
#define E200_KANA_MASK 0x04
#define E200_SYO_ROW 0
#define E200_SYO_MASK 0x08
#define E200_2NDF_ROW 0
#define E200_2NDF_MASK 0x10
#define E200_TEXT_ROW 3
#define E200_TEXT_MASK 0x08
#define E200_CASL_ROW 3
#define E200_CASL_MASK 0x10
#define E200_PRO_ROW 3
#define E200_PRO_MASK 0x20
#define E200_RUN_ROW 3
#define E200_RUN_MASK 0x40
#define E200_BATT_ROW 4
#define E200_BATT_MASK 0x01
#define E200_E_ROW 4
#define E200_E_MASK 0x02
#define E200_M_ROW 4
#define E200_M_MASK 0x04
#define E200_CONST_ROW 4
#define E200_CONST_MASK 0x08
#define E200_RAD_ROW 4
#define E200_RAD_MASK 0x10
#define E200_G_ROW 4
#define E200_G_MASK 0x20
#define E200_DE_ROW 4
#define E200_DE_MASK 0x40
#define E200_STAT_ROW 7
#define E200_STAT_MASK 0x20
#define E200_PRINT_ROW 7
#define E200_PRINT_MASK 0x40
#define E200_CPU_CLOCKS (4000 * 1000)
#define E200_STATES_KEYSTROBE_CLEAR 26

/* PC-G815 LCD・VRAM情報 */
#define G815_CELL_WIDTH 6
#define G815_CELL_HEIGHT 8
#define G815_LCD_COLS 24
#define G815_LCD_ROWS 4
#define G815_VRAM_COLS 24
#define G815_VRAM_ROWS 4
#define G815_VRAM_WIDTH (G815_VRAM_COLS * G815_CELL_WIDTH + 1)
#define G815_VRAM_HEIGHT (G815_VRAM_ROWS * 8)
#define G815_BUSY_ROW 0
#define G815_BUSY_MASK 0x01
#define G815_RUN_ROW 0
#define G815_RUN_MASK 0x02
#define G815_PRO_ROW 0
#define G815_PRO_MASK 0x04
#define G815_CASL_ROW 0
#define G815_CASL_MASK 0x08
#define G815_STAT_ROW 0
#define G815_STAT_MASK 0x20
#define G815_TEXT_ROW 0
#define G815_TEXT_MASK 0x40
#define G815_E_ROW 2
#define G815_E_MASK 0x02
#define G815_SYO_ROW 4
#define G815_SYO_MASK 0x01
#define G815_KANA_ROW 4
#define G815_KANA_MASK 0x02
#define G815_CONST_ROW 4
#define G815_CONST_MASK 0x04
#define G815_CAPS_ROW 4
#define G815_CAPS_MASK 0x08
#define G815_2NDF_ROW 4
#define G815_2NDF_MASK 0x10
#define G815_PRINT_ROW 5
#define G815_PRINT_MASK 0x01
#define G815_M_ROW 5
#define G815_M_MASK 0x02
#define G815_RAD_ROW 5
#define G815_RAD_MASK 0x04
#define G815_G_ROW 5
#define G815_G_MASK 0x08
#define G815_DE_ROW 5
#define G815_DE_MASK 0x10
#define G815_BATT_ROW 6
#define G815_BATT_MASK 0x01
#define G815_CPU_CLOCKS (4000 * 1000)
#define G815_STATES_KEYSTROBE_CLEAR 26 /* 不明 */

/* PC-G850 LCD・VRAM情報 */
#define G850_CELL_WIDTH 6
#define G850_CELL_HEIGHT 8
#define G850_LCD_COLS 24
#define G850_LCD_ROWS 6
#define G850_VRAM_COLS 24
#define G850_VRAM_ROWS 8
#define G850_VRAM_WIDTH (G850_VRAM_COLS * G850_CELL_WIDTH + 1)
#define G850_VRAM_HEIGHT (G850_VRAM_ROWS * 8)
#define G850_RUN_ROW 0
#define G850_RUN_MASK 0x02
#define G850_PRO_ROW 0
#define G850_PRO_MASK 0x08
#define G850_TEXT_ROW 0
#define G850_TEXT_MASK 0x40
#define G850_CASL_ROW 1
#define G850_CASL_MASK 0x08
#define G850_STAT_ROW 2
#define G850_STAT_MASK 0x01
#define G850_2NDF_ROW 2
#define G850_2NDF_MASK 0x20
#define G850_M_ROW 2
#define G850_M_MASK 0x80
#define G850_CAPS_ROW 3
#define G850_CAPS_MASK 0x04
#define G850_KANA_ROW 3
#define G850_KANA_MASK 0x80
#define G850_SYO_ROW 4
#define G850_SYO_MASK 0x02
#define G850_DE_ROW 4
#define G850_DE_MASK 0x10
#define G850_G_ROW 4
#define G850_G_MASK 0x40
#define G850_RAD_ROW 5
#define G850_RAD_MASK 0x01
#define G850_CONST_ROW 5
#define G850_CONST_MASK 0x04
#define G850_PRINT_ROW 5
#define G850_PRINT_MASK 0x10
#define G850_BUSY_ROW 5
#define G850_BUSY_MASK 0x40
#define G850_BATT_ROW 5
#define G850_BATT_MASK 0x80
#define G850_CPU_CLOCKS (9000 * 1000)
#define G850_STATES_KEYSTROBE_CLEAR 130

/* レイアウト */
#define PIXEL_WIDTH 10
#define PIXEL_HEIGHT 10
#define STATUS_CHAR_WIDTH 30
#define STATUS_HEIGHT 48
#define STATUS_RUN_WIDTH (3 * STATUS_CHAR_WIDTH)
#define STATUS_PRO_WIDTH (3 * STATUS_CHAR_WIDTH)
#define STATUS_TEXT_WIDTH (4 * STATUS_CHAR_WIDTH)
#define STATUS_CASL_WIDTH (4 * STATUS_CHAR_WIDTH)
#define STATUS_STAT_WIDTH (4 * STATUS_CHAR_WIDTH)
#define STATUS_2NDF_WIDTH (4 * STATUS_CHAR_WIDTH)
#define STATUS_M_WIDTH (2 * STATUS_CHAR_WIDTH)
#define STATUS_CAPS_WIDTH (4 * STATUS_CHAR_WIDTH)
#define STATUS_KANA_WIDTH (3 * STATUS_CHAR_WIDTH)
#define STATUS_SYO_WIDTH (2 * STATUS_CHAR_WIDTH)
#define STATUS_DE_WIDTH (2 * STATUS_CHAR_WIDTH)
#define STATUS_G_WIDTH (1 * STATUS_CHAR_WIDTH)
#define STATUS_RAD_WIDTH (3 * STATUS_CHAR_WIDTH)
#define STATUS_CONST_WIDTH (5 * STATUS_CHAR_WIDTH)
#define STATUS_PRINT_WIDTH (5 * STATUS_CHAR_WIDTH)
#define STATUS_BUSY_WIDTH (4 * STATUS_CHAR_WIDTH)
#define STATUS_BATT_WIDTH (5 * STATUS_CHAR_WIDTH)
#define STATUS_E_WIDTH (1 * STATUS_CHAR_WIDTH)
#define STATUS_FIRST 0
#define STATUS_RUN 0
#define STATUS_PRO 1
#define STATUS_TEXT 2
#define STATUS_CASL 3
#define STATUS_STAT 4
#define STATUS_2NDF 5
#define STATUS_M 6
#define STATUS_CAPS 7
#define STATUS_KANA 8
#define STATUS_SYO 9
#define STATUS_DE 10
#define STATUS_G 11
#define STATUS_RAD 12
#define STATUS_CONST 13
#define STATUS_PRINT 14
#define STATUS_BUSY 15
#define STATUS_BATT 16
#define STATUS_E 17
#define STATUS_LAST 17
#define KEY_WIDTH 80
#define KEY_HEIGHT 60

/* レイアウト PC-E200 */
#define E200_MARGIN_UP 60
#define E200_MARGIN_DOWN (60 - PIXEL_HEIGHT)
#define E200_MARGIN_LEFT PIXEL_WIDTH
#define E200_MARGIN_RIGHT 0
#define E200_LCD_MAIN_WIDTH                                                    \
  ((E200_CELL_WIDTH + 1) * E200_LCD_COLS * PIXEL_WIDTH)
#define E200_LCD_MAIN_HEIGHT                                                   \
  ((E200_CELL_HEIGHT + 1) * E200_LCD_ROWS * PIXEL_HEIGHT)
#define E200_LCD_X 0
#define E200_LCD_Y 0
#define E200_LCD_WIDTH                                                         \
  (E200_MARGIN_LEFT + E200_LCD_MAIN_WIDTH + E200_MARGIN_RIGHT)
#define E200_LCD_HEIGHT                                                        \
  (E200_MARGIN_UP + E200_LCD_MAIN_HEIGHT + E200_MARGIN_DOWN + PIXEL_HEIGHT)
#define _E200_STATUS_X E200_MARGIN_LEFT
#define _E200_USTATUS_Y (E200_MARGIN_UP - STATUS_HEIGHT - PIXEL_HEIGHT)
#define _E200_DSTATUS_Y (E200_MARGIN_UP + E200_LCD_MAIN_HEIGHT + PIXEL_HEIGHT)
#define E200_STATUS_RUN_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 2)
#define E200_STATUS_RUN_Y _E200_DSTATUS_Y
#define E200_STATUS_PRO_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 4)
#define E200_STATUS_PRO_Y _E200_DSTATUS_Y
#define E200_STATUS_TEXT_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 9)
#define E200_STATUS_TEXT_Y _E200_DSTATUS_Y
#define E200_STATUS_CASL_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 6)
#define E200_STATUS_CASL_Y _E200_DSTATUS_Y
#define E200_STATUS_STAT_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 18)
#define E200_STATUS_STAT_Y _E200_DSTATUS_Y
#define E200_STATUS_2NDF_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 11)
#define E200_STATUS_2NDF_Y _E200_USTATUS_Y
#define E200_STATUS_M_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 19)
#define E200_STATUS_M_Y _E200_USTATUS_Y
#define E200_STATUS_CAPS_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 3)
#define E200_STATUS_CAPS_Y _E200_USTATUS_Y
#define E200_STATUS_KANA_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 5)
#define E200_STATUS_KANA_Y _E200_USTATUS_Y
#define E200_STATUS_SYO_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 7)
#define E200_STATUS_SYO_Y _E200_USTATUS_Y
#define E200_STATUS_DE_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 13)
#define E200_STATUS_DE_Y _E200_USTATUS_Y
#define E200_STATUS_G_X (E200_STATUS_DE_X + STATUS_DE_WIDTH)
#define E200_STATUS_G_Y _E200_USTATUS_Y
#define E200_STATUS_RAD_X (E200_STATUS_G_X + STATUS_G_WIDTH)
#define E200_STATUS_RAD_Y _E200_USTATUS_Y
#define E200_STATUS_CONST_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 16)
#define E200_STATUS_CONST_Y _E200_USTATUS_Y
#define E200_STATUS_PRINT_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 20)
#define E200_STATUS_PRINT_Y _E200_DSTATUS_Y
#define E200_STATUS_BUSY_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 0)
#define E200_STATUS_BUSY_Y _E200_USTATUS_Y
#define E200_STATUS_BATT_X                                                     \
  (E200_MARGIN_LEFT + E200_LCD_MAIN_WIDTH - STATUS_BATT_WIDTH)
#define E200_STATUS_BATT_Y _E200_USTATUS_Y
#define E200_STATUS_E_X (_E200_STATUS_X + PIXEL_WIDTH * 6 * 21)
#define E200_STATUS_E_Y _E200_USTATUS_Y
#define E200_FKEY_X (E200_LCD_X + E200_LCD_WIDTH + 20)
#define E200_FKEY_Y E200_MARGIN_UP
#define E200_FKEY_WIDTH 100
#define E200_FKEY_HEIGHT 120
#define E200_FUNCTION_KEY_X E200_FKEY_X
#define E200_FUNCTION_KEY_Y E200_FKEY_Y
#define E200_FUNCTION_KEY_WIDTH (E200_FKEY_WIDTH * 9 + 20)
#define E200_FUNCTION_KEY_HEIGHT (E200_FKEY_HEIGHT * 3)
#define E200_BASIC_X (E200_FKEY_X + E200_FKEY_WIDTH * 0)
#define E200_BASIC_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_TEXT_X (E200_FKEY_X + E200_FKEY_WIDTH * 1)
#define E200_TEXT_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_CONST_X (E200_FKEY_X + E200_FKEY_WIDTH * 2)
#define E200_CONST_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_ANS_X (E200_FKEY_X + E200_FKEY_WIDTH * 2)
#define E200_ANS_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_OFF_X (E200_FKEY_X + E200_FKEY_WIDTH * 0)
#define E200_OFF_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_BREAK_X (E200_FKEY_X + E200_FKEY_WIDTH * 0)
#define E200_BREAK_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_2NDF_X (E200_FKEY_X + E200_FKEY_WIDTH * 3)
#define E200_2NDF_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_SIN_X (E200_FKEY_X + E200_FKEY_WIDTH * 4)
#define E200_SIN_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_COS_X (E200_FKEY_X + E200_FKEY_WIDTH * 5)
#define E200_COS_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_TAN_X (E200_FKEY_X + E200_FKEY_WIDTH * 6)
#define E200_TAN_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_FE_X (E200_FKEY_X + E200_FKEY_WIDTH * 7)
#define E200_FE_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_CLS_X (E200_FKEY_X + E200_FKEY_WIDTH * 8)
#define E200_CLS_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 0)
#define E200_NPR_X (E200_FKEY_X + E200_FKEY_WIDTH * 3)
#define E200_NPR_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_DEG_X (E200_FKEY_X + E200_FKEY_WIDTH * 4)
#define E200_DEG_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_LN_X (E200_FKEY_X + E200_FKEY_WIDTH * 5)
#define E200_LN_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_LOG_X (E200_FKEY_X + E200_FKEY_WIDTH * 6)
#define E200_LOG_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_RCP_X (E200_FKEY_X + E200_FKEY_WIDTH * 7)
#define E200_RCP_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_MDF_X (E200_FKEY_X + E200_FKEY_WIDTH * 8)
#define E200_MDF_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 1)
#define E200_PI_X (E200_FKEY_X + E200_FKEY_WIDTH * 3)
#define E200_PI_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_SQR_X (E200_FKEY_X + E200_FKEY_WIDTH * 4)
#define E200_SQR_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_SQU_X (E200_FKEY_X + E200_FKEY_WIDTH * 5)
#define E200_SQU_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_HAT_X (E200_FKEY_X + E200_FKEY_WIDTH * 6)
#define E200_HAT_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_LKAKKO_X (E200_FKEY_X + E200_FKEY_WIDTH * 7)
#define E200_LKAKKO_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)
#define E200_RKAKKO_X (E200_FKEY_X + E200_FKEY_WIDTH * 8)
#define E200_RKAKKO_Y (E200_FKEY_Y + E200_FKEY_HEIGHT * 2)

/* レイアウト PC-G815 */
#define G815_MARGIN_UP E200_MARGIN_UP
#define G815_MARGIN_DOWN E200_MARGIN_DOWN
#define G815_MARGIN_LEFT E200_MARGIN_LEFT
#define G815_MARGIN_RIGHT (E200_MARGIN_RIGHT + PIXEL_WIDTH)
#define G815_LCD_MAIN_WIDTH E200_LCD_MAIN_WIDTH
#define G815_LCD_MAIN_HEIGHT E200_LCD_MAIN_HEIGHT
#define G815_LCD_X 0
#define G815_LCD_Y 0
#define G815_LCD_WIDTH                                                         \
  (G815_MARGIN_LEFT + G815_LCD_MAIN_WIDTH + G815_MARGIN_RIGHT)
#define G815_LCD_HEIGHT                                                        \
  (G815_MARGIN_UP + G815_LCD_MAIN_HEIGHT + G815_MARGIN_DOWN + PIXEL_HEIGHT)
#define _G815_STATUS_X G815_MARGIN_LEFT
#define _G815_USTATUS_Y (G815_MARGIN_UP - STATUS_HEIGHT - PIXEL_HEIGHT)
#define _G815_DSTATUS_Y (G815_MARGIN_UP + G815_LCD_MAIN_HEIGHT + PIXEL_HEIGHT)
#define G815_STATUS_RUN_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 2)
#define G815_STATUS_RUN_Y _G815_DSTATUS_Y
#define G815_STATUS_PRO_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 4)
#define G815_STATUS_PRO_Y _G815_DSTATUS_Y
#define G815_STATUS_TEXT_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 9)
#define G815_STATUS_TEXT_Y _G815_DSTATUS_Y
#define G815_STATUS_CASL_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 6)
#define G815_STATUS_CASL_Y _G815_DSTATUS_Y
#define G815_STATUS_STAT_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 18)
#define G815_STATUS_STAT_Y _G815_DSTATUS_Y
#define G815_STATUS_2NDF_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 11)
#define G815_STATUS_2NDF_Y _G815_USTATUS_Y
#define G815_STATUS_M_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 19)
#define G815_STATUS_M_Y _G815_USTATUS_Y
#define G815_STATUS_CAPS_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 3)
#define G815_STATUS_CAPS_Y _G815_USTATUS_Y
#define G815_STATUS_KANA_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 5)
#define G815_STATUS_KANA_Y _G815_USTATUS_Y
#define G815_STATUS_SYO_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 7)
#define G815_STATUS_SYO_Y _G815_USTATUS_Y
#define G815_STATUS_DE_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 13)
#define G815_STATUS_DE_Y _G815_USTATUS_Y
#define G815_STATUS_G_X (G815_STATUS_DE_X + STATUS_DE_WIDTH)
#define G815_STATUS_G_Y _G815_USTATUS_Y
#define G815_STATUS_RAD_X (G815_STATUS_G_X + STATUS_G_WIDTH)
#define G815_STATUS_RAD_Y _G815_USTATUS_Y
#define G815_STATUS_CONST_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 16)
#define G815_STATUS_CONST_Y _G815_USTATUS_Y
#define G815_STATUS_PRINT_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 20)
#define G815_STATUS_PRINT_Y _G815_DSTATUS_Y
#define G815_STATUS_BUSY_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 0)
#define G815_STATUS_BUSY_Y _G815_USTATUS_Y
#define G815_STATUS_BATT_X                                                     \
  (G815_MARGIN_LEFT + G815_LCD_MAIN_WIDTH - STATUS_BATT_WIDTH)
#define G815_STATUS_BATT_Y _G815_USTATUS_Y
#define G815_STATUS_E_X (_G815_STATUS_X + PIXEL_WIDTH * 6 * 21)
#define G815_STATUS_E_Y _G815_USTATUS_Y
#define G815_FKEY_X (G815_LCD_X + G815_LCD_WIDTH + 20)
#define G815_FKEY_Y G815_MARGIN_UP
#define G815_FKEY_WIDTH 100
#define G815_FKEY_HEIGHT 120
#define G815_FUNCTION_KEY_X G815_FKEY_X
#define G815_FUNCTION_KEY_Y G815_FKEY_Y
#define G815_FUNCTION_KEY_WIDTH (G815_FKEY_WIDTH * 9 + 20)
#define G815_FUNCTION_KEY_HEIGHT (G815_FKEY_HEIGHT * 3)
#define G815_BASIC_X (G815_FKEY_X + G815_FKEY_WIDTH * 0)
#define G815_BASIC_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_TEXT_X (G815_FKEY_X + G815_FKEY_WIDTH * 1)
#define G815_TEXT_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_CONST_X (G815_FKEY_X + G815_FKEY_WIDTH * 2)
#define G815_CONST_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_ANS_X (G815_FKEY_X + G815_FKEY_WIDTH * 2)
#define G815_ANS_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_OFF_X (G815_FKEY_X + G815_FKEY_WIDTH * 0)
#define G815_OFF_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_BREAK_X (G815_FKEY_X + G815_FKEY_WIDTH * 0)
#define G815_BREAK_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_2NDF_X (G815_FKEY_X + G815_FKEY_WIDTH * 3)
#define G815_2NDF_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_SIN_X (G815_FKEY_X + G815_FKEY_WIDTH * 4)
#define G815_SIN_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_COS_X (G815_FKEY_X + G815_FKEY_WIDTH * 5)
#define G815_COS_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_TAN_X (G815_FKEY_X + G815_FKEY_WIDTH * 6)
#define G815_TAN_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_FE_X (G815_FKEY_X + G815_FKEY_WIDTH * 7)
#define G815_FE_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_CLS_X (G815_FKEY_X + G815_FKEY_WIDTH * 8)
#define G815_CLS_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 0)
#define G815_NPR_X (G815_FKEY_X + G815_FKEY_WIDTH * 3)
#define G815_NPR_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_DEG_X (G815_FKEY_X + G815_FKEY_WIDTH * 4)
#define G815_DEG_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_LN_X (G815_FKEY_X + G815_FKEY_WIDTH * 5)
#define G815_LN_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_LOG_X (G815_FKEY_X + G815_FKEY_WIDTH * 6)
#define G815_LOG_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_RCP_X (G815_FKEY_X + G815_FKEY_WIDTH * 7)
#define G815_RCP_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_MDF_X (G815_FKEY_X + G815_FKEY_WIDTH * 8)
#define G815_MDF_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 1)
#define G815_PI_X (G815_FKEY_X + G815_FKEY_WIDTH * 3)
#define G815_PI_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_SQR_X (G815_FKEY_X + G815_FKEY_WIDTH * 4)
#define G815_SQR_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_SQU_X (G815_FKEY_X + G815_FKEY_WIDTH * 5)
#define G815_SQU_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_HAT_X (G815_FKEY_X + G815_FKEY_WIDTH * 6)
#define G815_HAT_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_LKAKKO_X (G815_FKEY_X + G815_FKEY_WIDTH * 7)
#define G815_LKAKKO_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)
#define G815_RKAKKO_X (G815_FKEY_X + G815_FKEY_WIDTH * 8)
#define G815_RKAKKO_Y (G815_FKEY_Y + G815_FKEY_HEIGHT * 2)

/* レイアウト PC-G850 */
#define G850_MARGIN_UP 20
#define G850_MARGIN_DOWN 20
#define G850_MARGIN_LEFT 180
#define G850_MARGIN_RIGHT 200
#define G850_LCD_MAIN_WIDTH (G850_CELL_WIDTH * G850_LCD_COLS * PIXEL_WIDTH)
#define G850_LCD_MAIN_HEIGHT (G850_CELL_HEIGHT * G850_LCD_ROWS * PIXEL_HEIGHT)
#define G850_LCD_X 0
#define G850_LCD_Y 0
#define G850_LCD_WIDTH                                                         \
  (G850_MARGIN_LEFT + G850_LCD_MAIN_WIDTH + G850_MARGIN_RIGHT)
#define G850_LCD_HEIGHT                                                        \
  (G850_MARGIN_UP + G850_LCD_MAIN_HEIGHT + G850_MARGIN_DOWN)
#define _G850_RSTATUS_X (G850_MARGIN_LEFT + G850_LCD_MAIN_WIDTH + PIXEL_WIDTH)
#define _G850_LSTATUS_X PIXEL_WIDTH
#define _G850_STATUS_Y G850_MARGIN_UP
#define G850_STATUS_RUN_X _G850_RSTATUS_X
#define G850_STATUS_RUN_Y (_G850_STATUS_Y + STATUS_HEIGHT * 0)
#define G850_STATUS_PRO_X (G850_STATUS_RUN_X + STATUS_RUN_WIDTH)
#define G850_STATUS_PRO_Y (_G850_STATUS_Y + STATUS_HEIGHT * 0)
#define G850_STATUS_TEXT_X _G850_RSTATUS_X
#define G850_STATUS_TEXT_Y (_G850_STATUS_Y + STATUS_HEIGHT * 1)
#define G850_STATUS_CASL_X _G850_RSTATUS_X
#define G850_STATUS_CASL_Y (_G850_STATUS_Y + STATUS_HEIGHT * 2)
#define G850_STATUS_STAT_X _G850_RSTATUS_X
#define G850_STATUS_STAT_Y (_G850_STATUS_Y + STATUS_HEIGHT * 3)
#define G850_STATUS_2NDF_X _G850_RSTATUS_X
#define G850_STATUS_2NDF_Y (_G850_STATUS_Y + STATUS_HEIGHT * 4)
#define G850_STATUS_M_X (G850_STATUS_2NDF_X + STATUS_2NDF_WIDTH)
#define G850_STATUS_M_Y (_G850_STATUS_Y + STATUS_HEIGHT * 4)
#define G850_STATUS_CAPS_X _G850_RSTATUS_X
#define G850_STATUS_CAPS_Y (_G850_STATUS_Y + STATUS_HEIGHT * 5)
#define G850_STATUS_KANA_X _G850_RSTATUS_X
#define G850_STATUS_KANA_Y (_G850_STATUS_Y + STATUS_HEIGHT * 6)
#define G850_STATUS_SYO_X (G850_STATUS_KANA_X + STATUS_KANA_WIDTH)
#define G850_STATUS_SYO_Y (_G850_STATUS_Y + STATUS_HEIGHT * 6)
#define G850_STATUS_DE_X _G850_RSTATUS_X
#define G850_STATUS_DE_Y (_G850_STATUS_Y + STATUS_HEIGHT * 7)
#define G850_STATUS_G_X (G850_STATUS_DE_X + STATUS_DE_WIDTH)
#define G850_STATUS_G_Y (_G850_STATUS_Y + STATUS_HEIGHT * 7)
#define G850_STATUS_RAD_X (G850_STATUS_G_X + STATUS_G_WIDTH)
#define G850_STATUS_RAD_Y (_G850_STATUS_Y + STATUS_HEIGHT * 7)
#define G850_STATUS_CONST_X _G850_RSTATUS_X
#define G850_STATUS_CONST_Y (_G850_STATUS_Y + STATUS_HEIGHT * 8)
#define G850_STATUS_PRINT_X _G850_RSTATUS_X
#define G850_STATUS_PRINT_Y (_G850_STATUS_Y + STATUS_HEIGHT * 9)
#define G850_STATUS_BUSY_X _G850_LSTATUS_X
#define G850_STATUS_BUSY_Y (_G850_STATUS_Y + STATUS_HEIGHT * 8)
#define G850_STATUS_BATT_X _G850_LSTATUS_X
#define G850_STATUS_BATT_Y (_G850_STATUS_Y + STATUS_HEIGHT * 9)
#define G850_FKEY_X (G850_LCD_X + G850_LCD_WIDTH + 20)
#define G850_FKEY_Y (G850_LCD_Y + 40)
#define G850_FKEY_WIDTH 100
#define G850_FKEY_HEIGHT 120
#define G850_FUNCTION_KEY_X G850_FKEY_X
#define G850_FUNCTION_KEY_Y G850_FKEY_Y
#define G850_FUNCTION_KEY_WIDTH (G850_FKEY_WIDTH * 6 + 20)
#define G850_FUNCTION_KEY_HEIGHT (G850_FKEY_HEIGHT * 4)
#define G850_BASIC_X (G850_FKEY_X + G850_FKEY_WIDTH * 0)
#define G850_BASIC_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 0)
#define G850_TEXT_X (G850_FKEY_X + G850_FKEY_WIDTH * 1)
#define G850_TEXT_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 0)
#define G850_CONST_X (G850_FKEY_X + G850_FKEY_WIDTH * 2)
#define G850_CONST_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 0)
#define G850_ANS_X (G850_FKEY_X + G850_FKEY_WIDTH * 3)
#define G850_ANS_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 0)
#define G850_OFF_X (G850_FKEY_X + G850_FKEY_WIDTH * 4)
#define G850_OFF_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 0)
#define G850_BREAK_X (G850_FKEY_X + G850_FKEY_WIDTH * 5)
#define G850_BREAK_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 0)
#define G850_2NDF_X (G850_FKEY_X + G850_FKEY_WIDTH * 0)
#define G850_2NDF_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 1)
#define G850_SIN_X (G850_FKEY_X + G850_FKEY_WIDTH * 1)
#define G850_SIN_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 1)
#define G850_COS_X (G850_FKEY_X + G850_FKEY_WIDTH * 2)
#define G850_COS_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 1)
#define G850_TAN_X (G850_FKEY_X + G850_FKEY_WIDTH * 3)
#define G850_TAN_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 1)
#define G850_FE_X (G850_FKEY_X + G850_FKEY_WIDTH * 4)
#define G850_FE_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 1)
#define G850_CLS_X (G850_FKEY_X + G850_FKEY_WIDTH * 5)
#define G850_CLS_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 1)
#define G850_NPR_X (G850_FKEY_X + G850_FKEY_WIDTH * 0)
#define G850_NPR_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 2)
#define G850_DEG_X (G850_FKEY_X + G850_FKEY_WIDTH * 1)
#define G850_DEG_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 2)
#define G850_LN_X (G850_FKEY_X + G850_FKEY_WIDTH * 2)
#define G850_LN_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 2)
#define G850_LOG_X (G850_FKEY_X + G850_FKEY_WIDTH * 3)
#define G850_LOG_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 2)
#define G850_RCP_X (G850_FKEY_X + G850_FKEY_WIDTH * 4)
#define G850_RCP_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 2)
#define G850_MDF_X (G850_FKEY_X + G850_FKEY_WIDTH * 5)
#define G850_MDF_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 2)
#define G850_PI_X (G850_FKEY_X + G850_FKEY_WIDTH * 0)
#define G850_PI_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 3)
#define G850_SQR_X (G850_FKEY_X + G850_FKEY_WIDTH * 1)
#define G850_SQR_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 3)
#define G850_SQU_X (G850_FKEY_X + G850_FKEY_WIDTH * 2)
#define G850_SQU_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 3)
#define G850_HAT_X (G850_FKEY_X + G850_FKEY_WIDTH * 3)
#define G850_HAT_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 3)
#define G850_LKAKKO_X (G850_FKEY_X + G850_FKEY_WIDTH * 4)
#define G850_LKAKKO_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 3)
#define G850_RKAKKO_X (G850_FKEY_X + G850_FKEY_WIDTH * 5)
#define G850_RKAKKO_Y (G850_FKEY_Y + G850_FKEY_HEIGHT * 3)

#define LCD_TOP() (machine == MACHINE_G850 ? memory[0x790d] : 0)
#define VRAMOFF_R(row) (((row) + LCD_TOP()) % vramRows)
#define VRAMOFF_CR(col, row) (VRAMOFF_R(row) * vramWidth + (col) * cellWidth)
#define VRAMOFF_XY(x, y) (VRAMOFF_R(y / 8) * vramWidth + (x))
#define VRAM_CR(col, row) &vram[VRAMOFF_CR(col, row)]
#define VRAM_XY(x, y) &vram[VRAMOFF_XY(x, y)]

/*
        構造体
*/
/* 長方形 */
typedef struct {
  int x;
  int y;
  int w;
  int h;
} Rect;

/* ビットマップ画像 */
typedef struct {
  int width;
  int height;
  uint8_t *image;
} Bitmap;

/* マシン情報 */
typedef struct {
  int machine;
  char *machine_name;
  int cpu_clocks;
  int states_keystrobe_clear;
  int cell_width;
  int cell_height;
  int lcd_cols;
  int lcd_rows;
  int vram_width;
  int vram_height;
  int vram_cols;
  int vram_rows;
  int status_row[STATUS_LAST + 1];
  uint8_t status_mask[STATUS_LAST + 1];
  Rect pos_lcd;
  Rect pos_lcd_main;
  Rect pos_lcd_status[STATUS_LAST + 1];
  Rect pos_function_key;
  Rect pos_key[0x52];
} Machineinfo;

/*
        グローバル変数
*/
#if defined(DEF_GLOBAL)
#define EXTERN
#else
#define EXTERN extern
#endif

/* PC-E200情報 */
EXTERN const Machineinfo e200info
#if defined(DEF_GLOBAL)
    = {MACHINE_E200,
       "PC-E200",
       E200_CPU_CLOCKS,
       E200_STATES_KEYSTROBE_CLEAR,
       E200_CELL_WIDTH,
       E200_CELL_HEIGHT,
       E200_LCD_COLS,
       E200_LCD_ROWS,
       E200_VRAM_WIDTH,
       E200_VRAM_HEIGHT,
       E200_VRAM_COLS,
       E200_VRAM_ROWS,
       {E200_RUN_ROW, E200_PRO_ROW, E200_TEXT_ROW, E200_CASL_ROW, E200_STAT_ROW,
        E200_2NDF_ROW, E200_M_ROW, E200_CAPS_ROW, E200_KANA_ROW, E200_SYO_ROW,
        E200_DE_ROW, E200_G_ROW, E200_RAD_ROW, E200_CONST_ROW, E200_PRINT_ROW,
        E200_BUSY_ROW, E200_BATT_ROW, E200_E_ROW},
       {E200_RUN_MASK, E200_PRO_MASK, E200_TEXT_MASK, E200_CASL_MASK,
        E200_STAT_MASK, E200_2NDF_MASK, E200_M_MASK, E200_CAPS_MASK,
        E200_KANA_MASK, E200_SYO_MASK, E200_DE_MASK, E200_G_MASK, E200_RAD_MASK,
        E200_CONST_MASK, E200_PRINT_MASK, E200_BUSY_MASK, E200_BATT_MASK,
        E200_E_MASK},
       {E200_LCD_X, E200_LCD_Y, E200_LCD_WIDTH, E200_LCD_HEIGHT},
       {E200_MARGIN_LEFT, E200_MARGIN_UP, E200_LCD_MAIN_WIDTH,
        E200_LCD_MAIN_HEIGHT},
       {{E200_STATUS_RUN_X, E200_STATUS_RUN_Y, STATUS_RUN_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_PRO_X, E200_STATUS_PRO_Y, STATUS_PRO_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_TEXT_X, E200_STATUS_TEXT_Y, STATUS_TEXT_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_CASL_X, E200_STATUS_CASL_Y, STATUS_CASL_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_STAT_X, E200_STATUS_STAT_Y, STATUS_STAT_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_2NDF_X, E200_STATUS_2NDF_Y, STATUS_2NDF_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_M_X, E200_STATUS_M_Y, STATUS_M_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_CAPS_X, E200_STATUS_CAPS_Y, STATUS_CAPS_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_KANA_X, E200_STATUS_KANA_Y, STATUS_KANA_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_SYO_X, E200_STATUS_SYO_Y, STATUS_SYO_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_DE_X, E200_STATUS_DE_Y, STATUS_DE_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_G_X, E200_STATUS_G_Y, STATUS_G_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_RAD_X, E200_STATUS_RAD_Y, STATUS_RAD_WIDTH, STATUS_HEIGHT},
        {E200_STATUS_CONST_X, E200_STATUS_CONST_Y, STATUS_CONST_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_PRINT_X, E200_STATUS_PRINT_Y, STATUS_PRINT_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_BUSY_X, E200_STATUS_BUSY_Y, STATUS_BUSY_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_BATT_X, E200_STATUS_BATT_Y, STATUS_BATT_WIDTH,
         STATUS_HEIGHT},
        {E200_STATUS_E_X, E200_STATUS_E_Y, STATUS_E_WIDTH, STATUS_HEIGHT}},
       {E200_FUNCTION_KEY_X, E200_FUNCTION_KEY_Y, E200_FUNCTION_KEY_WIDTH,
        E200_FUNCTION_KEY_HEIGHT},
       {{0, 0, 0, 0},
        {E200_OFF_X, E200_OFF_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {E200_BASIC_X, E200_BASIC_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_TEXT_X, E200_TEXT_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {E200_ANS_X, E200_ANS_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {E200_CONST_X, E200_CONST_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {E200_PI_X, E200_PI_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {E200_RKAKKO_X, E200_RKAKKO_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_NPR_X, E200_NPR_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_DEG_X, E200_DEG_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_SQR_X, E200_SQR_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_SQU_X, E200_SQU_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_HAT_X, E200_HAT_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_LKAKKO_X, E200_LKAKKO_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_RCP_X, E200_RCP_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_MDF_X, E200_MDF_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_2NDF_X, E200_2NDF_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_SIN_X, E200_SIN_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_COS_X, E200_COS_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_LN_X, E200_LN_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_LOG_X, E200_LOG_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_TAN_X, E200_TAN_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_FE_X, E200_FE_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_CLS_X, E200_CLS_Y, KEY_WIDTH, KEY_HEIGHT},
        {E200_BREAK_X, E200_BREAK_Y, KEY_WIDTH, KEY_HEIGHT}}}
#endif
;

/* PC-G815情報 */
EXTERN const Machineinfo g815info
#if defined(DEF_GLOBAL)
    = {MACHINE_G815,
       "PC-G815",
       G815_CPU_CLOCKS,
       G815_STATES_KEYSTROBE_CLEAR,
       G815_CELL_WIDTH,
       G815_CELL_HEIGHT,
       G815_LCD_COLS,
       G815_LCD_ROWS,
       G815_VRAM_WIDTH,
       G815_VRAM_HEIGHT,
       G815_VRAM_COLS,
       G815_VRAM_ROWS,
       {G815_RUN_ROW, G815_PRO_ROW, G815_TEXT_ROW, G815_CASL_ROW, G815_STAT_ROW,
        G815_2NDF_ROW, G815_M_ROW, G815_CAPS_ROW, G815_KANA_ROW, G815_SYO_ROW,
        G815_DE_ROW, G815_G_ROW, G815_RAD_ROW, G815_CONST_ROW, G815_PRINT_ROW,
        G815_BUSY_ROW, G815_BATT_ROW, G815_E_ROW},
       {G815_RUN_MASK, G815_PRO_MASK, G815_TEXT_MASK, G815_CASL_MASK,
        G815_STAT_MASK, G815_2NDF_MASK, G815_M_MASK, G815_CAPS_MASK,
        G815_KANA_MASK, G815_SYO_MASK, G815_DE_MASK, G815_G_MASK, G815_RAD_MASK,
        G815_CONST_MASK, G815_PRINT_MASK, G815_BUSY_MASK, G815_BATT_MASK,
        G815_E_MASK},
       {G815_LCD_X, G815_LCD_Y, G815_LCD_WIDTH, G815_LCD_HEIGHT},
       {G815_MARGIN_LEFT, G815_MARGIN_UP, G815_LCD_MAIN_WIDTH,
        G815_LCD_MAIN_HEIGHT},
       {{G815_STATUS_RUN_X, G815_STATUS_RUN_Y, STATUS_RUN_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_PRO_X, G815_STATUS_PRO_Y, STATUS_PRO_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_TEXT_X, G815_STATUS_TEXT_Y, STATUS_TEXT_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_CASL_X, G815_STATUS_CASL_Y, STATUS_CASL_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_STAT_X, G815_STATUS_STAT_Y, STATUS_STAT_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_2NDF_X, G815_STATUS_2NDF_Y, STATUS_2NDF_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_M_X, G815_STATUS_M_Y, STATUS_M_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_CAPS_X, G815_STATUS_CAPS_Y, STATUS_CAPS_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_KANA_X, G815_STATUS_KANA_Y, STATUS_KANA_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_SYO_X, G815_STATUS_SYO_Y, STATUS_SYO_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_DE_X, G815_STATUS_DE_Y, STATUS_DE_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_G_X, G815_STATUS_G_Y, STATUS_G_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_RAD_X, G815_STATUS_RAD_Y, STATUS_RAD_WIDTH, STATUS_HEIGHT},
        {G815_STATUS_CONST_X, G815_STATUS_CONST_Y, STATUS_CONST_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_PRINT_X, G815_STATUS_PRINT_Y, STATUS_PRINT_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_BUSY_X, G815_STATUS_BUSY_Y, STATUS_BUSY_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_BATT_X, G815_STATUS_BATT_Y, STATUS_BATT_WIDTH,
         STATUS_HEIGHT},
        {G815_STATUS_E_X, G815_STATUS_E_Y, STATUS_E_WIDTH, STATUS_HEIGHT}},
       {G815_FUNCTION_KEY_X, G815_FUNCTION_KEY_Y, G815_FUNCTION_KEY_WIDTH,
        G815_FUNCTION_KEY_HEIGHT},
       {{0, 0, 0, 0},
        {G815_OFF_X, G815_OFF_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G815_BASIC_X, G815_BASIC_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_TEXT_X, G815_TEXT_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G815_ANS_X, G815_ANS_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G815_CONST_X, G815_CONST_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G815_PI_X, G815_PI_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G815_RKAKKO_X, G815_RKAKKO_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_NPR_X, G815_NPR_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_DEG_X, G815_DEG_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_SQR_X, G815_SQR_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_SQU_X, G815_SQU_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_HAT_X, G815_HAT_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_LKAKKO_X, G815_LKAKKO_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_RCP_X, G815_RCP_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_MDF_X, G815_MDF_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_2NDF_X, G815_2NDF_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_SIN_X, G815_SIN_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_COS_X, G815_COS_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_LN_X, G815_LN_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_LOG_X, G815_LOG_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_TAN_X, G815_TAN_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_FE_X, G815_FE_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_CLS_X, G815_CLS_Y, KEY_WIDTH, KEY_HEIGHT},
        {G815_BREAK_X, G815_BREAK_Y, KEY_WIDTH, KEY_HEIGHT}}}
#endif
;

/* PC-G850情報 */
EXTERN const Machineinfo g850info
#if defined(DEF_GLOBAL)
    = {MACHINE_G850,
       "PC-G850",
       G850_CPU_CLOCKS,
       G850_STATES_KEYSTROBE_CLEAR,
       G850_CELL_WIDTH,
       G850_CELL_HEIGHT,
       G850_LCD_COLS,
       G850_LCD_ROWS,
       G850_VRAM_WIDTH,
       G850_VRAM_HEIGHT,
       G850_VRAM_COLS,
       G850_VRAM_ROWS,
       {G850_RUN_ROW, G850_PRO_ROW, G850_TEXT_ROW, G850_CASL_ROW, G850_STAT_ROW,
        G850_2NDF_ROW, G850_M_ROW, G850_CAPS_ROW, G850_KANA_ROW, G850_SYO_ROW,
        G850_DE_ROW, G850_G_ROW, G850_RAD_ROW, G850_CONST_ROW, G850_PRINT_ROW,
        G850_BUSY_ROW, G850_BATT_ROW, 0},
       {G850_RUN_MASK, G850_PRO_MASK, G850_TEXT_MASK, G850_CASL_MASK,
        G850_STAT_MASK, G850_2NDF_MASK, G850_M_MASK, G850_CAPS_MASK,
        G850_KANA_MASK, G850_SYO_MASK, G850_DE_MASK, G850_G_MASK, G850_RAD_MASK,
        G850_CONST_MASK, G850_PRINT_MASK, G850_BUSY_MASK, G850_BATT_MASK, 0},
       {G850_LCD_X, G850_LCD_Y, G850_LCD_WIDTH, G850_LCD_HEIGHT},
       {G850_MARGIN_LEFT, G850_MARGIN_UP, G850_LCD_MAIN_WIDTH,
        G850_LCD_MAIN_HEIGHT},
       {{G850_STATUS_RUN_X, G850_STATUS_RUN_Y, STATUS_RUN_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_PRO_X, G850_STATUS_PRO_Y, STATUS_PRO_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_TEXT_X, G850_STATUS_TEXT_Y, STATUS_TEXT_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_CASL_X, G850_STATUS_CASL_Y, STATUS_CASL_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_STAT_X, G850_STATUS_STAT_Y, STATUS_STAT_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_2NDF_X, G850_STATUS_2NDF_Y, STATUS_2NDF_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_M_X, G850_STATUS_M_Y, STATUS_M_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_CAPS_X, G850_STATUS_CAPS_Y, STATUS_CAPS_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_KANA_X, G850_STATUS_KANA_Y, STATUS_KANA_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_SYO_X, G850_STATUS_SYO_Y, STATUS_SYO_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_DE_X, G850_STATUS_DE_Y, STATUS_DE_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_G_X, G850_STATUS_G_Y, STATUS_G_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_RAD_X, G850_STATUS_RAD_Y, STATUS_RAD_WIDTH, STATUS_HEIGHT},
        {G850_STATUS_CONST_X, G850_STATUS_CONST_Y, STATUS_CONST_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_PRINT_X, G850_STATUS_PRINT_Y, STATUS_PRINT_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_BUSY_X, G850_STATUS_BUSY_Y, STATUS_BUSY_WIDTH,
         STATUS_HEIGHT},
        {G850_STATUS_BATT_X, G850_STATUS_BATT_Y, STATUS_BATT_WIDTH,
         STATUS_HEIGHT},
        {0, 0, 0, 0}},
       {G850_FUNCTION_KEY_X, G850_FUNCTION_KEY_Y, G850_FUNCTION_KEY_WIDTH,
        G850_FUNCTION_KEY_HEIGHT},
       {{0, 0, 0, 0},
        {G850_OFF_X, G850_OFF_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G850_BASIC_X, G850_BASIC_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_TEXT_X, G850_TEXT_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G850_ANS_X, G850_ANS_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G850_CONST_X, G850_CONST_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G850_PI_X, G850_PI_Y, KEY_WIDTH, KEY_HEIGHT},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {G850_RKAKKO_X, G850_RKAKKO_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_NPR_X, G850_NPR_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_DEG_X, G850_DEG_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_SQR_X, G850_SQR_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_SQU_X, G850_SQU_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_HAT_X, G850_HAT_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_LKAKKO_X, G850_LKAKKO_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_RCP_X, G850_RCP_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_MDF_X, G850_MDF_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_2NDF_X, G850_2NDF_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_SIN_X, G850_SIN_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_COS_X, G850_COS_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_LN_X, G850_LN_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_LOG_X, G850_LOG_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_TAN_X, G850_TAN_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_FE_X, G850_FE_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_CLS_X, G850_CLS_Y, KEY_WIDTH, KEY_HEIGHT},
        {G850_BREAK_X, G850_BREAK_Y, KEY_WIDTH, KEY_HEIGHT}}}
#endif
;

/* エミュレートされるマシンの情報 */
EXTERN const Machineinfo *machineInfo[MACHINE_LAST + 1]
#if defined(DEF_GLOBAL)
    = {&e200info, &g815info, &g850info}
#endif
;

/* マシン名 */
EXTERN const char *machineName[]
#if defined(DEF_GLOBAL)
    =
        {
            "PC-G801",   "PC-E200", "PC-G802",  "PC-G803",
            "PC-G805",   "PC-G811", "PC-G813",  "PC-G820",
            "PC-G830",   "PC-E220", "PC-E200", /* E200ANY */
            "PC-G815",   "PC-G850", "PC-G850S", "PC-G850V",
            "PC-G850VS", "PC-G850" /* G850ANY */
}
#endif
;

/* フォント */
#include "font.h"

/* CPU/メモリ */
EXTERN Z80stat z80;           /* CPU状態 */
EXTERN int freqCPU;           /* CPU周波数 */
EXTERN int romBanks;          /* ROMバンク数 */
EXTERN int romBank;           /* 現在のROMバンク番号 */
EXTERN int exBanks;           /* EXROMバンク数 */
EXTERN int exBank;            /* 現在のEXROMバンク番号 */
EXTERN int ramBank;           /* 現在のRAMバンク番号 */
EXTERN uint8_t ioReset;         /* 周辺機器用リセット信号 */
EXTERN uint8_t onCd;            /* CD信号によるON制御(PC-G850) */
EXTERN uint8_t m1Wait;          /* M1信号後wait制御(PC-G850) */
EXTERN uint8_t ioWait;          /* I/O wait(PC-G850) */
EXTERN uint8_t csClk;           /* 高速・低速モード(PC-G850) */
EXTERN uint8_t memory[0x10001]; /* メモリ */
EXTERN uint8_t *exram;          /* EXRAM */
EXTERN uint8_t *rom;            /* ROM */
EXTERN uint8_t *exrom;          /* EXROM */

/* 割り込み */
EXTERN uint8_t interruptType; /* 割り込み要因 */
EXTERN uint8_t interruptMask; /* 割り込みマスク */

/* タイマ */
EXTERN uint8_t timer;       /* タイマ */
EXTERN int timerInterval; /* タイマ周期 */
EXTERN int timerCount;    /* タイマ用カウンタ */

/* キーボード */
EXTERN uint16 keyStrobe;     /* キーストローブ */
EXTERN uint16 keyStrobeLast; /* 最後に設定したキーストローブ */
EXTERN uint8_t keyMatrix[10];  /* キー状態 */
EXTERN uint8_t keyShift;       /* シフトキー状態 */
EXTERN uint8_t keyBreak;       /* ONキー状態 */
EXTERN int keyReset;         /* リセットボタン状態 */
EXTERN int
    statesKeyStrobeLast; /* キーストローブを設定したときの累積ステート数 */
EXTERN int statesKeyStrobeClear; /* キーストローブがクリアされるステート数 */
EXTERN uint16 keyConv[KEY_LAST + 1];      /* キー変換テーブル */
EXTERN uint16 keyConvAlt[KEY_LAST + 1];   /* キー変換テーブル */
EXTERN uint16 keyConvCtrl[KEY_LAST + 1];  /* キー変換テーブル */
EXTERN uint16 keyConvShift[KEY_LAST + 1]; /* キー変換テーブル */

/* LCD */
EXTERN int lcdRead;
EXTERN uint8_t lcdX;           /* 横アドレス */
EXTERN uint8_t lcdY;           /* 縦アドレス */
EXTERN uint8_t lcdX2;          /* 横アドレス2 (PC-G815) */
EXTERN uint8_t lcdY2;          /* 縦アドレス2 (PC-G815) */
EXTERN uint8_t lcdBegin;       /* 表示開始アドレス(PC-E200/PC-G815) */
EXTERN uint8_t lcdDisabled;    /* LCD OFF(PC-G850) */
EXTERN uint8_t lcdTop;         /* 表示開始位置(PC-G850) */
EXTERN uint8_t lcdContrast;    /* コントラスト(PC-G850) */
EXTERN int lcdEffectMirror;  /* ミラーモード(PC-G850) */
EXTERN int lcdEffectBlack;   /* 黒塗りつぶし(PC-G850) */
EXTERN int lcdEffectReverse; /* 反転(PC-G850) */
EXTERN int lcdEffectDark;    /* LCD電圧増加(PC-G850) */
EXTERN int lcdEffectWhite;   /* 白塗りつぶし(PC-G850) */
EXTERN int lcdMod;
EXTERN uint8_t lcdTrim;       /* トリム(PC-G850) */
EXTERN uint8_t vram[166 * 9]; /* VRAM */

/* 11pin I/F */
EXTERN uint8_t pin11If;    /* 11pinI/Fの動作 */
#define PIN11IF_3IO 0    /* 3in 3out I/F */
#define PIN11IF_8PIO 1   /* 8bits PIO    */
#define PIN11IF_UART 2   /* 全2重通信    */
EXTERN uint8_t pin11In;    /* 11pin入力状態 */
EXTERN uint8_t xinEnabled; /* Xin可否 */
EXTERN uint8_t io3Out;     /* Xout状態 */
EXTERN uint8_t pio8Io;     /* PIO入出力方向 */
EXTERN uint8_t pio8Out;    /* PIOデータレジスタ(出力) */
EXTERN uint8_t uartIo;
#define UARTIO_UASEL 0x01
#define UARTIO_SIOOUT 0x02
#define UARTIO_IROUT 0x04
#define UARTIO_IRST 0x80
EXTERN uint8_t uartMode;
#define UARTMODE_BAUD 0x07
#define UARTMODE_INT 0xc0
EXTERN uint8_t uartCommand;
#define UARTCOMMAND_TXEN 0x10
#define UARTCOMMAND_RXEN 0x20
#define UARTCOMMAND_ERLL 0x40
#define UARTCOMMAND_SRST 0x80
EXTERN uint8_t uartStatus;
#define UARTSTATUS_TXEMP 0x04
#define UARTSTATUS_TXRDY 0x08
#define UARTSTATUS_RXRDY 0x10
#define UARTSTATUS_PERR 0x20
#define UARTSTATUS_OVER 0x40
#define UARTSTATUS_FRME 0x80

/* SIO */
EXTERN char pathSioIn[FILENAME_MAX];  /* SIO入力ファイルのパス名 */
EXTERN char pathSioOut[FILENAME_MAX]; /* SIO出力ファイルのパス名 */
EXTERN int sioMode;                   /* SIOの状態 */
#define SIO_MODE_STOP 0               /* 停止 */
#define SIO_MODE_IN 1                 /* 入力 */
#define SIO_MODE_OUT 2                /* 出力 */
EXTERN char sioBuffer[0x20000];       /* SIOバッファ */
EXTERN int sioBufferSize;             /* SIOバッファのサイズ */
EXTERN int sioCount;                  /* SIOカウンタ */
EXTERN int sioBusy;                   /* 受信可か? */

/* ブザー */
EXTERN int buzzer;               /* ブザーモード */
#define BUZZER_NONE 0            /* 音なし */
#define BUZZER_USE 1             /* 音あり */
#define BUZZER_SYNC 2            /* 同期をとる */
EXTERN int soundBufferSize;      /* サウンドバッファのサイズ */
EXTERN uint8_t *soundReadBuffer;   /* サウンド読み込みバッファ */
EXTERN uint8_t *soundWriteBuffer;  /* サウンド書き込みバッファ */
EXTERN volatile int soundPlayed; /* サウンドを出力したか? */

/* バッテリー */
EXTERN int battChk;

/* BASICインタープリタ */
EXTERN struct Basic bas;
EXTERN int useBasic;
EXTERN char pathBasic[FILENAME_MAX];

/* 設定 */
EXTERN int emulatorMode;     /* エミュレータのモード */
#define EMULATOR_MODE_RUN 0  /* 実行中 */
#define EMULATOR_MODE_MENU 1 /* メニュー表示中 */
EXTERN int machine;          /* エミュレートされるマシン */
EXTERN int machineSub;
EXTERN char dirROM[FILENAME_MAX];   /* ROMイメージのあるディレクトリ */
EXTERN char pathRAM[FILENAME_MAX];  /* RAM保存ファイルのパス名 */
EXTERN char pathProg[FILENAME_MAX]; /* プログラムのパス名 */
EXTERN int useROM;                  /* 実機のROMを使うか? */
EXTERN int freqUpdateIO;            /* I/Oの更新周期 */
EXTERN int beginProg;               /* プログラムの開始アドレス */
EXTERN int emulateIOCS;             /* IOCSをエミュレートするか? */
EXTERN int lcdScales;               /* LCDの階調数 */
EXTERN int noWait;                  /* ウェイトなしモード */
EXTERN int zoom;                    /* LCDの倍率 */
EXTERN uint32 colorBack;            /* LCD背景色 */
EXTERN uint32 colorOff;             /* LCD OFF色 */
EXTERN uint32 colorOn;              /* LCD ON色 */
EXTERN int cellWidth;               /* cellの幅 */
EXTERN int cellHeight;              /* cellの高さ */
EXTERN int lcdRows;                 /* LCDの行数 */
EXTERN int lcdCols;                 /* LCDの列数 */
EXTERN int lcdWidth;                /* LCDの幅 */
EXTERN int lcdHeight;               /* LCDの高さ */
EXTERN int vramRows;                /* VRAMの行数 */
EXTERN int vramCols;                /* VRAMの列数 */
EXTERN int vramWidth;               /* VRAMの幅 */
EXTERN int vramHeight;              /* VRAMの高さ */
EXTERN int closeAsOff;              /* 「閉じる」をOFFキーとして扱うか? */
EXTERN int useJoy;                  /* ジョイスティックを使うか? */
EXTERN uint8_t joyUp;    /* ジョイスディックの上に割り当てられたキー */
EXTERN uint8_t joyDown;  /* ジョイスティックの下に割り当てられたキー */
EXTERN uint8_t joyLeft;  /* ジョイスティックの左に割り当てられたキー */
EXTERN uint8_t joyRight; /* ジョイスティックの右に割り当てられたキー */
EXTERN uint8_t
    joyButton[JOY_BUTTONS]; /* ジョイスティックのボタンに割り当てられたキー */
EXTERN int useSoftwareKey;  /* ソフトウェアキーを使うか? */
EXTERN int serialTest;      /* シリアルポートのテストを行うか? */
EXTERN int useFileFilter;   /* ファイルフィルタを使うか? */
EXTERN const char *pathInfoImage; /* 情報画像 */

/*
        関数プロトタイプ
*/
/* depend.c */
int readBin(const char *, void *, int);
int writeBin(const char *, const void *, int);
int readHex(const char *, void *, int *, int, int);
int readHexAbs(const char *, void *, int *, int, int);
int writeHex(const char *, const void *, int, int);
int writeHexAbs(const char *, const void *, int, int);
int copyFile(const char *, const char *);
int removeFile(const char *);
int cmpFile(const char *, const char *);
int updateLCD(void);
void updateLCDContrast(void);
void updateLayout(void);
uint8_t updateKey(void);
int delay(int);
void updateSerial(void);
int initDepend(void);
void quitDepend(void);

/* io.c */
uint8_t pin11out(void);

/* iocs.c */
void poweroff(void);
void putpat(uint8_t, uint8_t, const uint8_t *, uint8_t);
void scrup(void);
void scrdown(uint8_t, uint8_t);
void clrall(void);
void putchr(uint8_t, uint8_t, uint8_t);
int nextRow(uint8_t *, uint8_t *);
int nextCol(uint8_t *, uint8_t *);
void prevCol(uint8_t *, uint8_t *);
int putchrNext(uint8_t *, uint8_t *, uint8_t);
int putstr(uint8_t, uint8_t, void *, ...);
void glocate(uint8_t, uint8_t);
void gcls(void);
int moveCursor(uint8_t);
int gputchr(uint8_t);
void gprintf(const char *, ...);
uint8_t point(int16, int16);
void pset(int16, int16, uint8_t);
void putstatus(int, int);
void line(int16, int16, int16, int16, uint8_t, uint16);
void box(int16, int16, int16, int16, uint8_t, uint16);
void boxfill(int16, int16, int16, int16, uint8_t, uint16);
uint8_t peekKeycode(void);
uint8_t getKeycode(void);
uint8_t keycode2ascii(uint8_t, int);
int setMode(uint8_t);
uint8_t getChrcode(int);
void waitRelease(void);
uint8_t ggetchr(void);
uint8_t ggetline(uint8_t *, const uint8_t *, int, ...);

/* sio.c */
uint8_t sioRead(uint8_t);
int sioLoad(const char *);
uint8_t sioWrite(uint8_t);
int sioSave(const char *);

/* sound.c */
int getSoundBufferSize(int);
void writeSound(int);
void flipSoundBuffer(void);

/* monitor.c */
int atoix(const char *);
void go(uint16);
int loadProg(uint16 *, const char *);
int monitor(void);

/* basic.c */
int decodeNum(uint8_t *, const uint8_t *);
int getKeywordFromCode(uint8_t *, int);
int inportBas(const char *);
int exportBas(const char *);
int basRun(struct Basic *);
int basPro(struct Basic *);
int initBasic(struct Basic *);

/* menu.c */
int isG800File(const char *);
uint8_t selectFile(char *);
int inputFile(char *);
void pushVram(void);
void popVram(void);
void popup(const char *, const char *, ...);
int menu(void);

/* util.c */
uint8_t getAutoKey(void);
void setAutoKeyText(const char *, int);
void setAutoKey(uint8_t);
char *ankToUtf8(const uint8_t *, char *);
int loadSym(const char *);
int writeProfFile(const char *);
int writePathFile(const char *);

/* init.c */
int init(int argc, char *argv[]);

/* g800.c */
int storeRAM(const char *);
void boot(void);
int isoff(void);
int exec(int);

#endif

/*
        Copyright 2005 ~ 2017 maruhiro
        All rights reserved.

        Redistribution and use in source and binary forms,
        with or without modification, are permitted provided that
        the following conditions are met:

         1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

         2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

        THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
   EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
   EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* eof */
